---
import sugar from "sugar";
import type { ArticleCollectionEntry } from "~/core/articles";
import { Articles } from "~/core/articles";
import { Routes } from "~/core/routes";
import { Utils } from "~/core/utils";

interface Props {
    article: ArticleCollectionEntry;
}

const { article } = Astro.props;
---

<a
    class:list={[
        "group px-4 py-2",
        "bg-secondary-950 hover:bg-primary-500",
        "border border-secondary-900 hover:border-primary-500",
    ]}
    href={Routes.articles.constructRead(article.slug)}
>
    <p class="text-xs pb-1">
        <time
            id="article-time"
            class="text-primary-500 group-hover:text-white"
            datetime={article.data.time.toISOString()}
            title={sugar.Date.full(article.data.time)}
        >
            {sugar.Date.format(article.data.time)}
        </time>
        <span class="text-secondary-500 group-hover:text-white">
            / {Articles.getReadingTime(article.body)} mins. read
        </span>
    </p>

    <p class="pb-0.5">{article.data.title}</p>
    <p
        class="text-sm text-secondary-500 group-hover:text-white pb-1"
        set:html={Utils.renderSimpleMarkdown(article.data.description)}
    />

    <p class="text-xs group-hover:text-white text-secondary-500">
        {
            [article.data.category, ...article.data.tags]
                .map((x) => `#${x}`)
                .join(" ")
        }
    </p>
</a>

<script>
    import sugar from "sugar";

    document.addEventListener("DOMContentLoaded", () => {
        document.querySelectorAll("time#article-time").forEach((x) => {
            const iso = x.getAttribute("datetime")!;
            const date = new Date(iso);
            x.innerHTML = sugar.Date.relative(date);
        });
    });
</script>

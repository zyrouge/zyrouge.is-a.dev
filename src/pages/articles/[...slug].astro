---
import { CollectionEntry, getCollection } from "astro:content";
import sugar from "sugar";
import { Articles } from "~/core/articles";
import type { HeadMetadata } from "~/core/metadata";
import Base from "~/layouts/Base.astro";

interface Props {
    article: CollectionEntry<"articles">;
}

export const getStaticPaths = async () => {
    const blogEntries = await getCollection("articles");
    return blogEntries.map((entry) => ({
        params: { slug: entry.slug },
        props: { article: entry } satisfies Props,
    }));
};

const {
    article: {
        data: { title, description, category, tags, time: _time },
        body,
        render,
    },
} = Astro.props;
const { Content, headings } = await render();

const head: HeadMetadata = {
    title,
    description,
    meta: {
        "og:type": "article",
        category: category,
        keywords: tags.join(", "),
    },
};

const time = new Date(_time);
const readingTime = Articles.getReadingTime(body);
---

<Base head={head}>
    <div>
        <hr />

        <div class="u-container u-container-h">
            <article>
                <div class="mb-3">
                    <p class="text-3xl font-bold mb-1">
                        {title}
                    </p>
                    <p class="mb-1">
                        {description}
                    </p>

                    <p class="text-sm mb-1 text-secondary-400">
                        {[category, ...tags].map((x) => `#${x}`).join(" ")}
                    </p>
                    <p class="text-xs">
                        <time
                            class="text-primary-500"
                            datetime={time.toISOString()}
                        >
                            {sugar.Date.relative(time)}
                        </time>
                        <span class="text-secondary-400">
                            / {readingTime} mins. read</span
                        >
                    </p>
                </div>

                <hr />

                <div class="lg:grid lg:grid-cols-4 lg:gap-12">
                    <aside class="mt-8 lg:col-span-1">
                        <div class="lg:sticky lg:top-6">
                            <p class="text-lg font-bold mb-2">
                                Table of contents
                            </p>
                            <ul
                                class="lg:max-h-[85vh] lg:overflow-y-auto"
                                id="headings"
                            >
                                {
                                    headings.map((x) => (
                                        <li
                                            class:list={[
                                                "cursor-pointer pl-4 py-1 hover:bg-secondary-900 border-l-2 border-secondary-700",
                                                "data-[active]:lg:bg-primary-500/10 data-[active]:lg:border-primary-500 data-[active]:lg:text-primary-500",
                                            ]}
                                            data-hid={x.slug}
                                        >
                                            {x.text}
                                        </li>
                                    ))
                                }
                            </ul>
                        </div>
                    </aside>

                    <div
                        class="u-stylify lg:row-start-1 lg:col-start-1 lg:col-span-3"
                        id="content"
                    >
                        <Content />
                    </div>
                </div>
            </article>
        </div>
    </div>
</Base>

<script src="../../assets/scripts/article.ts"></script>
